#!/usr/bin/env bash

set -e

err()
{
    out=$1
    shift
    echo "$@" >&2
    exit $out
}


usage()
{
    local action=$1

    if [ -z "$action" ]; then
        echo "Usage: `basename $0` cmd

Available cmds:
ls      - display all stashed patshes
show    - view a given patch
save    - save a new patch or update existing one without file reverting
apply   - apply a given patch without deleting it
push    - save a new patch or update existing one and revert files
pop     - apply a patch and delete it
rm      - delete a given patch from the queue
log     - show history for VCSes stashes
revert  - revert files owned by given stash
help    - show help" >&2
        return
    fi

    eval echo '${'${action}_usage'}' >&2
}

export LC_ALL=C

[ -x `which svn` ] || err 1 "svn is not installed on this system"
svnrp=$(svn info 2>&1 | sed -n 's/Working Copy Root Path: \(.*\)/\1/p')
svnrev=$(svn info 2>&1 | grep '^Revision: ' | cut -d ' ' -f 2)

[ -d "${svnrp}" ] || err 1 "should be used inside a working copy"
[ -w "${svnrp}/.svn" ] || err 1 "no write access to ${svnrp}/.svn"

patchdir=${svnrp}/.svn/patches
svnstrip=$(svn info | grep 'Relative URL:' | awk -F: '{print $2}' | xargs | tr -dc / | wc -c)
svnrelative=$(svn info | grep 'Relative URL:' | awk -F: '{print $2}' | xargs)

mkdir -p "${patchdir}" || err 1 "Impossible to create the patch directory"

#[ -d ${patchdir}/.svn ] && VCS="svn"
#[ -f ${patchdir}/.fslckout ] && VCS="fossil"
[ -d ${patchdir}/.git ] && VCS="git"
#[ -d ${patchdir}/.hg ] && VCS="hg"

_vcs_git_update()
{
    local name=$1
    shift
    git add ${name}
    git commit --message "$*" --edit --
}

_vcs_git_remove()
{
    local name=$1
    shift
    git rm -r ${name}
    git commit --message "$*" --edit --
}

# $1 - stash name
# $2 - full flag: yes/no
# $3 - show patch flag: yes/no
# $@ - options to bypass to VCS
_vcs_git_log()
{
    local name=$1
    local full=$2
    local patch=$3
    shift 3

    format="--oneline"
    [ "$full" = "yes" ] && format=""

    show_patch=""
    [ "$patch" = "yes" ] && show_patch="-p"

    if [ -n "$name" ]; then
        git log $format $show_patch "$@" "$name"
    else
        git log $format $show_patch "$@"
    fi
}

# $1 - stash name
# $2 - temporary directory
# $3 - revision
_vcs_git_get_rev()
{
    local name=$1
    local tmp=$2
    local rev=$3
    shift 3

    local branch="${name}__"

    git checkout -b ${branch} $rev
    cp -a "$name" "$tmp"
    git checkout master
    git branch -D ${branch}
}

# Generate svn commands to restore history tracking for moved/copied files
_history_restore_script()
{
    local changes
    changes="$1"

    cat "${changes}" | grep -A1 '^copy from ' | awk -v rel="${svnrelative}" '
        BEGIN {
            from = "";
            to = "";
            # Skip "/^"
            rellen = length(rel) - 2;
            if (rellen > 0) {
                rellen += 1; # Skip "/" in future for repos without prefixes
            }
        }

        /^copy from / {
            to="";
            idx = index($0, "@");
            from = substr($0, 11 + rellen, idx - rellen - 11);
        }

        /^copy to /   {
            to = substr($0, 9 + rellen);
            if (length(from) > 0) {
                printf("svn cp \"%s\" \"%s\"\n", from, to);
                to = "";
                from = "";
            }
        }
    '
}

# Fix "svn --git" patch for correct handling changes in moved/copied files
_fix_svn_git_patch()
{
    local changes
    changes="$1"

    cat "${changes}" | awk '
        BEGIN {
            from = "";
            to = "";
            start = 0;
        }

        {
            if ($0 ~ /^diff --git/) {
                start = 1;
            }

            if ($0 ~ /^copy from /) {
                to="";
                idx = index($0, "@");
                from = substr($0, 11, idx - 11);
            }

            if ($0 ~ /^copy to /) {
                to = substr($0, 9);
            }

            if ($0 ~ /^--- / && start == 1) {
                start = 0;
                if (length(from) > 0 && length(to) > 0) {
                    t = $0;
                    gsub(from, to, t);
                    print t;
                } else {
                    print;
                }
                from="";
                to=""
            } else {
                print;
            }
        }
    '
}

_save()
{
    while [ -n "$1" ];
    do
        case "$1" in
            -u) update=yes ;;
            -k) keep=yes ;;
            -*) die 1 "Unsupported option: $1" ;;
            *)
                if [ -z "$name" ]; then
                    name="$1"
                else
                    files="$files "$1""
                fi
            ;;
        esac
        shift
    done

    [ -z "$name" ] && die 1 "No stash specified"
    [ ${name:0:1} = "." ] && err 1 "The stash name must not start with '.'"

    patch="${patchdir}/$name"
    diff="${patch}/changes.diff"
    diff_fixed="${patch}/changes_fixed.diff"
    others="${patch}/others.list"
    rev="${patch}/rev"
    diff_list="${patch}/diff.list"
    hist_script="${patch}/hist.script"
    readme="${patch}/readme.txt"

    if [ -z "${update}" -a -d "${patch}" ]; then
        err 1 "A patch named ${name} already exists, try option -u to force update it."
    fi

    updating=0
    if [ -d "${patch}" ]; then
        updating=1
    fi

    mkdir -p "${patch}"

    if [ -z "${files}" ]; then
        changes=$(svn st -q ${files})
        [ "${changes}" != "" ] || err 1 "No changes to be saved"
        st_opt="-q"
    fi

    revert_list="${patch}/revert.list.tmp"

    rm -f "${others}" "${diff_list}" "${revert_list}"

    echo ${svnrev} > "${rev}"
    svn st ${st_opt} ${files} | while read line
    do
        type=`echo "$line" | cut -c 1`
        hist=`echo "$line" | cut -c 4`
        file=`echo "$line" | cut -c 9-`

        # Skip:
        # > moved to
        # > moved from
        [ "$type" = ">" ] && continue

        if [ "$type" != "D" ]; then
            enc=`LANG=C file --mime-encoding "$file" | awk -F: '{print $2}' | xargs`
        else
            enc="text"
        fi

        # Other (aka untracked and binary) files:
        #   Handle binary files here too: `svn diff --git` creates good patch, but `svn patch` can't
        #   apply binary delta
        if [ "$type" = "?" -o "$enc" = "binary" ]; then
            fname=`realpath -m --relative-to="$svnrp" -s -q $file`
            fdir=`dirname "${fname}"`
            fn=`basename "${fname}"`
            mkdir -p "${patch}/others/${fdir}"
            cp "${file}" "${patch}/others/${fdir}/"

            echo "${fname}" >> "${others}"
            echo "${file}" >> "${revert_list}"
        fi

        # Separate processing: handle binary files as a diff part too: meta data can be changed
        if [ "$type" != "?" ]; then
            if [ "$enc" = "binary" ]; then
                mime=`svn propget svn:mime-type "${file}" 2>&1 | grep -v '^svn:'`
                if [ -z "$mime" ]; then
                    # Force set binary property for valid work `svn diff --git`
                    svn propset svn:mime-type application/octet-stream "${file}"
                fi
            fi

            echo "${file}" >> "${diff_list}"
        fi
    done

    if [ -f "$diff_list" ]; then
        svn diff --git $(cat "$diff_list") > "${diff}"
        _history_restore_script "${diff}" > "${hist_script}"
        _fix_svn_git_patch "${diff}" > "${diff_fixed}"
        cat "$diff_list" >> "$revert_list"
    fi

    if [ -f "$revert_list" ]; then
        if [ -z "${keep}" ]; then
            svn st $(cat "$revert_list" | sort | uniq) | awk '
                /^[MAD]/  {print substr($0, 9)}
                /^[ M]M/  {print substr($0, 9)}
            ' | xargs -I{} svn revert {}

            svn st $(cat "$revert_list" | sort | uniq) | awk '
                /^[?]/ {print substr($0, 9)}
            ' | xargs -I{} rm -fv {}
        fi
    fi

    cat > "${readme}" << EOF
This patch-set generaed with svn-stash tool from the svn-wrapper script set:
  https://github.com/h4tr3d/svn-wrapper

You should apply this set by the 'svn-stash apply NAME' command.

To apply this patch manually, do next steps:

  1. Checkout files from the "diff.list" to the revision from previous step:

      svn up -r \`cat rev\` \`cat diff.list\`

  2. Restore history tracking for copied and movied files. Simple run commands from "hist.script"

  3. Apply patch changes_fixed.diff with appropriate STRIP param, in general - 1:

      svn patch --strip 1 changes_fixed.diff

     Note, changes.diff contains information generated by "svn diff --git" and this file not svn-friendly,
     so, you must apply changes_fixed.diff instead.

  4. Restore untracked and binary files from the "others/" directory. This directory keeps valid
     files subpath:

      cat others.list | xargs -I{} | cp others/{} {}

  5. Restore work revision and solve conflicts:
      svn up

On errors, contact with patch provider.

Enjoy!
EOF

    # Disable error exit for VCS
    set +e
    if [ -n "${VCS}" ]; then
        if [[ $updating == 1 ]]; then
            msg="Update stash '${name}'"
        else
            msg="Create stash '${name}'"
        fi

        (cd ${patchdir}; _vcs_${VCS}_update ${name} "${msg}")
    fi

    echo "stashed"
    exit 0
}

save_usage="
Usage: `basename $0` save <name> [-u] [files...]\n
Where:\n
name - stash name\n
-u   - update stash\n
"
save()
{
    [ $# -ge 1 ] || err 1 "$save_usage"
    _save -k "$@"
}

push_usage="
Usage: `basename $0` push <name> [-u] [files...]\n
Where:\n
name - stash name\n
-u   - update stash\n
"
push()
{
    [ $# -ge 1 ] || err 1 "$push_usage"
    _save "$@"
}

list()
{
    ls -t1 ${patchdir} | while read p; do
    [ -d ${patchdir}/$p ] && echo $p
done | nl | awk '{printf("@{%s}\t%s\n", $1, $2);}'
exit 0
}

_get_patch()
{
    patch="$patchdir/$1"
    if [ -d "$patch" ]; then
        echo $patch
        return 0
    fi

    nm=$(list | grep "^$1" | awk '{print $2}')
    [ -z "$nm" ] && return 1
    echo "$patchdir/$nm"
}

show()
{
    [ $# -eq 1 ] || err 1 "Usage: `basename $0` show <name|number>"
    patch=$(_get_patch $1)

    [ -z "$patch" -o -d "${patch}" ] || err 1 "$1: no such patch"

    if [ -f "$patch/others.list" ]; then
        echo
        echo "Untracked and binary files in change-list:"
        cat "$patch/others.list" | sed 's/^/    /'
        echo
    fi

    [ "$patch/changes.diff" ] && cat "${patch}/changes.diff" | colordiff --color=auto

    exit 0
}


#
# Official way to apply patches between revisions. Lite version.
#
_apply_lite2() {
    local patch="$1"
    [ -d "${patch}" ] || err 1 "$1: no such patch"
    cd ${svnrp}

    local changes others patch_rev work_rev files other_files diff_list hist_script

    changes="${patch}/changes.diff"
    others="${patch}/others.list"
    diff_list="${patch}/diff.list"
    hist_script="${patch}/hist.script"

    #svn patch --dry-run --strip ${svnstrip} "${changes}"

    patch_rev=$(cat "$patch/rev")
    work_rev="$(svn info | grep '^Revision:' | awk '{print $2}')"

    files=""
    [ -f "${diff_list}" ] && files="$(cat "${diff_list}")"

    # Switch back (forward?) to Patch revision
    if [ $patch_rev -ne $work_rev ]; then
        echo "Switch to stashed revision: $patch_rev"
        svn up -r $patch_rev $files
        #> /dev/null
    fi

    # Restore history: too keep valid tracking for move/copy
    [ -f "${hist_script}" ] && . "${hist_script}"

    # Apply changes patch
    if [ -f "${changes}" ]; then
        fixed="${patch}/fixed_patch.diff.tmp"

        _fix_svn_git_patch "${changes}" > "${fixed}"
        svn patch --strip ${svnstrip} "${fixed}"
        rm -f "${fixed}"
    fi

    # Return back untracked and some other files
    if [ -f "$others" ]; then
        cat "$others" | while read line
        do
            cp "$patch/others/$line" "$line"
        done
    fi

    # And switch to work revision back, it helps to solve conflicts in interactive way
    if [ $patch_rev -ne $work_rev ]; then
        echo "Pop work revision back: $work_rev"
        svn up -r $work_rev $files
        #> /dev/null
    fi
}

# Apply given revision of the patch, works only when Name provided
_vcs_apply()
{
    #set -x

    # Check for reference
    is_ref=`echo "$1" | grep '^@{[0-9]\+}$' || true`
    if [ -z "$is_ref" ]; then
        # Cut @ from name
        name=`echo "$1" | cut -d '@' -f 1`
        revision=`echo "$1" | cut -d '@' -f 2`
    else
        name="$1"
        revision=""
    fi

    local patch="$(_get_patch $name)"
    [ -d "${patch}" ] || err 1 "$name: no such patch"

    cd ${svnrp}

    shift

    if [ -n "$is_ref" -o -z "$revision" -o -z "${VCS}" ]; then
        _apply_lite2 "$patch" "$@"
        return 0
    fi

    # Process VCS
    local tmp=`mktemp -d /tmp/XXXXXXXXXXX`
    local short=`basename "${patch}"`
    trap "rm -rf '$tmp'" RETURN
    (
        cd "${patchdir}"
        _vcs_git_get_rev $short "$tmp" $revision
    )

    _apply_lite2 "$tmp/$short" "$@"
}

apply()
{
    [ $# -eq 1 ] || err 1 "Usage: `basename $0` apply <name[@REV]|reference>"
    _vcs_apply "$@"
    exit 0
}

pop()
{
    [ $# -eq 1 ] || err 1 "Usage: `basename $0` pop <name[@REV]|reference>"
    _vcs_apply "$@"
    remove $1
    exit 0
}

remove()
{
    [ $# -eq 1 ] || err 1 "Usage: `basename $0` rm <name|reference>"
    patch=$(_get_patch $1)
    [ -d "${patch}" ] || err 1 "$1: no such patch"
    name=$(basename "${patch}")
    rm -rf "${patch}"

    if [ -n "${VCS}" ]; then
        msg="Remove stash '$name'"
        (cd ${patchdir}; _vcs_${VCS}_remove ${name} "${msg}")
    fi

    exit 0
}

# Show log for VCS tracked stash
log_usage="
Usage: `basename $0` log <name> [-f][-p] [-- VCS-specific options]\n
Where:\n
name - stash name\n
-f   - full log, otherwise shoe only headers\n
-p   - show commit changes\n
"
log()
{
    if [ -z "${VCS}" ]; then
        err 1 "You do not use VCS to track stash changes"
    fi

    full="no"
    show_patch="no"
    patch_raw=""

    while [ -n "$1" ];
    do
        case "$1" in
            -f)
                full="yes"
            ;;
            -p)
                show_patch="yes"
            ;;
            --)
                shift
                break
            ;;
            -*)
                die 1 "Unsupported option: $1"
            ;;
            *)
                if [ -n "$patch_raw" ]; then
                    die 1 "Patch already specified to: $patch_raw"
                fi
                patch_raw="$1"
            ;;
        esac
        shift
    done

    local short_patch=""
    if [ -n "$patch_raw" ]; then
        local patch="$(_get_patch $patch_raw)"
        [ -d "${patch}" ] || err 1 "$patch_raw: no such patch"
        short_patch=`basename "${patch}"`
    fi

    cd "$patchdir"

    _vcs_${VCS}_log "$short_patch" $full $show_patch "$@"
}

# Revert files affected by Stash
revert()
{
    [ $# -eq 1 ] || err 1 "Usage: `basename $0` revert <name|number>"
    patch=$(_get_patch $1)
    [ -z "$patch" -o -d "${patch}" ] || err 1 "$1: no such patch"

    others="${patch}/others.list"
    diff_list="${patch}/diff.list"
    revert_list="${patch}/revert.list.tmp"

    trap "rm -f '$revert_list'" RETURN

    cd ${svnrp}

    local ask
    read -p "You run revert command. Are you shure? [yes/NO] " ask

    if [ ! "$ask" = "yes" ]; then
        return 0
    fi


    cat "$others" "$diff_list" 2>/dev/null | sort | uniq > "$revert_list"

    svn st $(cat "$revert_list") | awk '
        /^[MAD]/  {print substr($0, 9)}
        /^[ M]M/  {print substr($0, 9)}
    ' | xargs -I{} svn revert {}

    svn st $(cat "$revert_list") | awk '
        /^[?]/ {print substr($0, 9)}
    ' | xargs -I{} rm -fv {}
}

cmd=$1
[ -n "$1" ] && shift

case "$cmd" in
    ls) list "$@" ;;
    show|save|apply|pop|push|list|log|revert) $cmd "$@" ;;
    rm) remove "$@" ;;
    *) usage "$@" ;;
esac

